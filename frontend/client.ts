// Code generated by the Encore 1.49.3 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly fairmint: fairmint.ServiceClient
    public readonly health: health.ServiceClient
    public readonly price: price.ServiceClient
    public readonly storage: storage.ServiceClient
    public readonly token: token.ServiceClient
    public readonly wallet: wallet.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.fairmint = new fairmint.ServiceClient(base)
        this.health = new health.ServiceClient(base)
        this.price = new price.ServiceClient(base)
        this.storage = new storage.ServiceClient(base)
        this.token = new token.ServiceClient(base)
        this.wallet = new wallet.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createEvent as api_fairmint_admin_createEvent,
    getAdminWallet as api_fairmint_admin_getAdminWallet,
    pauseEvent as api_fairmint_admin_pauseEvent,
    resumeEvent as api_fairmint_admin_resumeEvent
} from "~backend/fairmint/admin";
import {
    burnTokens as api_fairmint_burn_burnTokens,
    createBurnTransaction as api_fairmint_burn_createBurnTransaction,
    getUserBurns as api_fairmint_burn_getUserBurns
} from "~backend/fairmint/burn";
import {
    getActiveEvent as api_fairmint_event_getActiveEvent,
    getEventStats as api_fairmint_event_getEventStats
} from "~backend/fairmint/event";
import {
    getLeaderboard as api_fairmint_leaderboard_getLeaderboard,
    getTokenLeaderboard as api_fairmint_leaderboard_getTokenLeaderboard
} from "~backend/fairmint/leaderboard";
import {
    getBatchPrices as api_fairmint_pricing_getBatchPrices,
    getRaydiumPrice as api_fairmint_pricing_getRaydiumPrice,
    healthCheck as api_fairmint_pricing_healthCheck
} from "~backend/fairmint/pricing";
import {
    getQuote as api_fairmint_quote_getQuote,
    validateQuote as api_fairmint_quote_validateQuote
} from "~backend/fairmint/quote";
import {
    getRealTimeBurnStream as api_fairmint_realtime_dashboard_getRealTimeBurnStream,
    getRealtimeDashboard as api_fairmint_realtime_dashboard_getRealtimeDashboard,
    getRealtimeLeaderboard as api_fairmint_realtime_dashboard_getRealtimeLeaderboard,
    getRealtimeTokenPrices as api_fairmint_realtime_dashboard_getRealtimeTokenPrices
} from "~backend/fairmint/realtime-dashboard";
import {
    emergencyAction as api_fairmint_safety_emergencyAction,
    performSafetyCheck as api_fairmint_safety_performSafetyCheck,
    resetDailyCaps as api_fairmint_safety_resetDailyCaps
} from "~backend/fairmint/safety";
import {
    detectAnomalies as api_fairmint_safety_enhanced_detectAnomalies,
    enhancedEmergencyPause as api_fairmint_safety_enhanced_enhancedEmergencyPause,
    performEnhancedSafetyCheck as api_fairmint_safety_enhanced_performEnhancedSafetyCheck
} from "~backend/fairmint/safety-enhanced";
import {
    claimTokens as api_fairmint_vesting_claimTokens,
    createVestingSchedules as api_fairmint_vesting_createVestingSchedules,
    getClaimableAmount as api_fairmint_vesting_getClaimableAmount,
    getEventVestingSchedules as api_fairmint_vesting_getEventVestingSchedules,
    getVestingSchedule as api_fairmint_vesting_getVestingSchedule
} from "~backend/fairmint/vesting";
import {
    createDetailedVestingSchedules as api_fairmint_vesting_enhanced_createDetailedVestingSchedules,
    enhancedClaimTokens as api_fairmint_vesting_enhanced_enhancedClaimTokens,
    getDetailedClaimableAmount as api_fairmint_vesting_enhanced_getDetailedClaimableAmount,
    getVestingEventSummary as api_fairmint_vesting_enhanced_getVestingEventSummary,
    processBulkClaims as api_fairmint_vesting_enhanced_processBulkClaims
} from "~backend/fairmint/vesting-enhanced";

export namespace fairmint {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.burnTokens = this.burnTokens.bind(this)
            this.claimTokens = this.claimTokens.bind(this)
            this.createBurnTransaction = this.createBurnTransaction.bind(this)
            this.createDetailedVestingSchedules = this.createDetailedVestingSchedules.bind(this)
            this.createEvent = this.createEvent.bind(this)
            this.createVestingSchedules = this.createVestingSchedules.bind(this)
            this.detectAnomalies = this.detectAnomalies.bind(this)
            this.emergencyAction = this.emergencyAction.bind(this)
            this.enhancedClaimTokens = this.enhancedClaimTokens.bind(this)
            this.enhancedEmergencyPause = this.enhancedEmergencyPause.bind(this)
            this.getActiveEvent = this.getActiveEvent.bind(this)
            this.getAdminWallet = this.getAdminWallet.bind(this)
            this.getBatchPrices = this.getBatchPrices.bind(this)
            this.getClaimableAmount = this.getClaimableAmount.bind(this)
            this.getDetailedClaimableAmount = this.getDetailedClaimableAmount.bind(this)
            this.getEventStats = this.getEventStats.bind(this)
            this.getEventVestingSchedules = this.getEventVestingSchedules.bind(this)
            this.getLeaderboard = this.getLeaderboard.bind(this)
            this.getQuote = this.getQuote.bind(this)
            this.getRaydiumPrice = this.getRaydiumPrice.bind(this)
            this.getRealTimeBurnStream = this.getRealTimeBurnStream.bind(this)
            this.getRealtimeDashboard = this.getRealtimeDashboard.bind(this)
            this.getRealtimeLeaderboard = this.getRealtimeLeaderboard.bind(this)
            this.getRealtimeTokenPrices = this.getRealtimeTokenPrices.bind(this)
            this.getTokenLeaderboard = this.getTokenLeaderboard.bind(this)
            this.getUserBurns = this.getUserBurns.bind(this)
            this.getVestingEventSummary = this.getVestingEventSummary.bind(this)
            this.getVestingSchedule = this.getVestingSchedule.bind(this)
            this.healthCheck = this.healthCheck.bind(this)
            this.pauseEvent = this.pauseEvent.bind(this)
            this.performEnhancedSafetyCheck = this.performEnhancedSafetyCheck.bind(this)
            this.performSafetyCheck = this.performSafetyCheck.bind(this)
            this.processBulkClaims = this.processBulkClaims.bind(this)
            this.resetDailyCaps = this.resetDailyCaps.bind(this)
            this.resumeEvent = this.resumeEvent.bind(this)
            this.validateQuote = this.validateQuote.bind(this)
        }

        /**
         * Records a token burn transaction
         */
        public async burnTokens(params: RequestType<typeof api_fairmint_burn_burnTokens>): Promise<ResponseType<typeof api_fairmint_burn_burnTokens>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/burn`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_burn_burnTokens>
        }

        /**
         * Claims SOLF tokens
         */
        public async claimTokens(params: RequestType<typeof api_fairmint_vesting_claimTokens>): Promise<ResponseType<typeof api_fairmint_vesting_claimTokens>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/vesting/claim`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_vesting_claimTokens>
        }

        /**
         * Creates a burn transaction that needs to be signed by the client
         */
        public async createBurnTransaction(params: RequestType<typeof api_fairmint_burn_createBurnTransaction>): Promise<ResponseType<typeof api_fairmint_burn_createBurnTransaction>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/create-burn-transaction`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_burn_createBurnTransaction>
        }

        /**
         * Enhanced vesting schedule creation with detailed calculations
         */
        public async createDetailedVestingSchedules(params: RequestType<typeof api_fairmint_vesting_enhanced_createDetailedVestingSchedules>): Promise<ResponseType<typeof api_fairmint_vesting_enhanced_createDetailedVestingSchedules>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/vesting/create-detailed-schedules`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_vesting_enhanced_createDetailedVestingSchedules>
        }

        /**
         * Creates a new fair mint event (admin only)
         */
        public async createEvent(params: RequestType<typeof api_fairmint_admin_createEvent>): Promise<ResponseType<typeof api_fairmint_admin_createEvent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/admin/create-event`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_admin_createEvent>
        }

        /**
         * Creates vesting schedules when fair mint event is finalized
         */
        public async createVestingSchedules(params: RequestType<typeof api_fairmint_vesting_createVestingSchedules>): Promise<ResponseType<typeof api_fairmint_vesting_createVestingSchedules>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/vesting/create-schedules`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_vesting_createVestingSchedules>
        }

        /**
         * Real-time anomaly detection
         */
        public async detectAnomalies(params: RequestType<typeof api_fairmint_safety_enhanced_detectAnomalies>): Promise<ResponseType<typeof api_fairmint_safety_enhanced_detectAnomalies>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId:    String(params.eventId),
                timeWindow: params.timeWindow === undefined ? undefined : String(params.timeWindow),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/safety/detect-anomalies`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_safety_enhanced_detectAnomalies>
        }

        /**
         * Emergency action endpoint for admins
         */
        public async emergencyAction(params: RequestType<typeof api_fairmint_safety_emergencyAction>): Promise<ResponseType<typeof api_fairmint_safety_emergencyAction>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/safety/emergency`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_safety_emergencyAction>
        }

        /**
         * Enhanced claim with partial claiming and better error handling
         */
        public async enhancedClaimTokens(params: RequestType<typeof api_fairmint_vesting_enhanced_enhancedClaimTokens>): Promise<ResponseType<typeof api_fairmint_vesting_enhanced_enhancedClaimTokens>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/vesting/enhanced-claim`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_vesting_enhanced_enhancedClaimTokens>
        }

        /**
         * Enhanced emergency pause with multiple pause types
         */
        public async enhancedEmergencyPause(params: RequestType<typeof api_fairmint_safety_enhanced_enhancedEmergencyPause>): Promise<ResponseType<typeof api_fairmint_safety_enhanced_enhancedEmergencyPause>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/safety/enhanced-pause`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_safety_enhanced_enhancedEmergencyPause>
        }

        /**
         * Gets the currently active fair mint event
         */
        public async getActiveEvent(): Promise<ResponseType<typeof api_fairmint_event_getActiveEvent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/active`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_event_getActiveEvent>
        }

        /**
         * Gets the admin wallet address for verification
         */
        public async getAdminWallet(): Promise<ResponseType<typeof api_fairmint_admin_getAdminWallet>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/admin/wallet`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_admin_getAdminWallet>
        }

        /**
         * Batch price fetching for multiple tokens
         */
        public async getBatchPrices(params: RequestType<typeof api_fairmint_pricing_getBatchPrices>): Promise<ResponseType<typeof api_fairmint_pricing_getBatchPrices>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pricing/batch`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_pricing_getBatchPrices>
        }

        /**
         * Gets claimable amounts for a user
         */
        public async getClaimableAmount(params: RequestType<typeof api_fairmint_vesting_getClaimableAmount>): Promise<ResponseType<typeof api_fairmint_vesting_getClaimableAmount>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId: String(params.eventId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/vesting/claimable/${encodeURIComponent(params.userWallet)}`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_vesting_getClaimableAmount>
        }

        /**
         * Enhanced claimable amount calculation with detailed breakdown
         */
        public async getDetailedClaimableAmount(params: RequestType<typeof api_fairmint_vesting_enhanced_getDetailedClaimableAmount>): Promise<ResponseType<typeof api_fairmint_vesting_enhanced_getDetailedClaimableAmount>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId: String(params.eventId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/vesting/detailed-claimable/${encodeURIComponent(params.userWallet)}`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_vesting_enhanced_getDetailedClaimableAmount>
        }

        /**
         * Gets event statistics
         */
        public async getEventStats(params: RequestType<typeof api_fairmint_event_getEventStats>): Promise<ResponseType<typeof api_fairmint_event_getEventStats>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId: params.eventId === undefined ? undefined : String(params.eventId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/stats`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_event_getEventStats>
        }

        /**
         * Admin function to get all vesting schedules for an event
         */
        public async getEventVestingSchedules(params: { eventId: number }): Promise<ResponseType<typeof api_fairmint_vesting_getEventVestingSchedules>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/vesting/event/${encodeURIComponent(params.eventId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_vesting_getEventVestingSchedules>
        }

        /**
         * Gets the user leaderboard for the fair mint event
         */
        public async getLeaderboard(params: RequestType<typeof api_fairmint_leaderboard_getLeaderboard>): Promise<ResponseType<typeof api_fairmint_leaderboard_getLeaderboard>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId: params.eventId === undefined ? undefined : String(params.eventId),
                limit:   params.limit === undefined ? undefined : String(params.limit),
                offset:  params.offset === undefined ? undefined : String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/leaderboard`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_leaderboard_getLeaderboard>
        }

        /**
         * Gets a price quote for burning tokens
         */
        public async getQuote(params: RequestType<typeof api_fairmint_quote_getQuote>): Promise<ResponseType<typeof api_fairmint_quote_getQuote>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/quote`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_quote_getQuote>
        }

        /**
         * Gets price data exclusively from Raydium with comprehensive error handling
         */
        public async getRaydiumPrice(params: { mint: string }): Promise<ResponseType<typeof api_fairmint_pricing_getRaydiumPrice>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pricing/raydium/${encodeURIComponent(params.mint)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_pricing_getRaydiumPrice>
        }

        /**
         * Real-time burn stream with filtering
         */
        public async getRealTimeBurnStream(params: RequestType<typeof api_fairmint_realtime_dashboard_getRealTimeBurnStream>): Promise<ResponseType<typeof api_fairmint_realtime_dashboard_getRealTimeBurnStream>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId:     params.eventId === undefined ? undefined : String(params.eventId),
                limit:       params.limit === undefined ? undefined : String(params.limit),
                minUsdValue: params.minUsdValue,
                timeWindow:  params.timeWindow === undefined ? undefined : String(params.timeWindow),
                tokenSymbol: params.tokenSymbol,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/realtime/burn-stream`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_realtime_dashboard_getRealTimeBurnStream>
        }

        /**
         * Real-time comprehensive dashboard data
         */
        public async getRealtimeDashboard(params: RequestType<typeof api_fairmint_realtime_dashboard_getRealtimeDashboard>): Promise<ResponseType<typeof api_fairmint_realtime_dashboard_getRealtimeDashboard>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId:        params.eventId === undefined ? undefined : String(params.eventId),
                includeHistory: params.includeHistory === undefined ? undefined : String(params.includeHistory),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/realtime/dashboard`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_realtime_dashboard_getRealtimeDashboard>
        }

        /**
         * Enhanced real-time leaderboard with analytics
         */
        public async getRealtimeLeaderboard(params: RequestType<typeof api_fairmint_realtime_dashboard_getRealtimeLeaderboard>): Promise<ResponseType<typeof api_fairmint_realtime_dashboard_getRealtimeLeaderboard>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId: params.eventId === undefined ? undefined : String(params.eventId),
                topN:    params.topN === undefined ? undefined : String(params.topN),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/realtime/leaderboard`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_realtime_dashboard_getRealtimeLeaderboard>
        }

        /**
         * Get real-time price data for accepted tokens
         */
        public async getRealtimeTokenPrices(params: RequestType<typeof api_fairmint_realtime_dashboard_getRealtimeTokenPrices>): Promise<ResponseType<typeof api_fairmint_realtime_dashboard_getRealtimeTokenPrices>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId: params.eventId === undefined ? undefined : String(params.eventId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/realtime/token-prices`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_realtime_dashboard_getRealtimeTokenPrices>
        }

        /**
         * Gets the token leaderboard showing burn statistics by token
         */
        public async getTokenLeaderboard(params: RequestType<typeof api_fairmint_leaderboard_getTokenLeaderboard>): Promise<ResponseType<typeof api_fairmint_leaderboard_getTokenLeaderboard>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId: params.eventId === undefined ? undefined : String(params.eventId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/token-leaderboard`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_leaderboard_getTokenLeaderboard>
        }

        /**
         * Gets user's burn history
         */
        public async getUserBurns(params: RequestType<typeof api_fairmint_burn_getUserBurns>): Promise<ResponseType<typeof api_fairmint_burn_getUserBurns>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId: params.eventId === undefined ? undefined : String(params.eventId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/burns/${encodeURIComponent(params.userWallet)}`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_burn_getUserBurns>
        }

        /**
         * Get comprehensive vesting event summary for admin dashboard
         */
        public async getVestingEventSummary(params: { eventId: number }): Promise<ResponseType<typeof api_fairmint_vesting_enhanced_getVestingEventSummary>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/vesting/event-summary/${encodeURIComponent(params.eventId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_vesting_enhanced_getVestingEventSummary>
        }

        /**
         * Gets user's vesting schedule and claim history
         */
        public async getVestingSchedule(params: RequestType<typeof api_fairmint_vesting_getVestingSchedule>): Promise<ResponseType<typeof api_fairmint_vesting_getVestingSchedule>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId: String(params.eventId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/vesting/schedule/${encodeURIComponent(params.userWallet)}`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_vesting_getVestingSchedule>
        }

        /**
         * Health check endpoint for pricing service
         */
        public async healthCheck(): Promise<ResponseType<typeof api_fairmint_pricing_healthCheck>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pricing/health`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_pricing_healthCheck>
        }

        /**
         * Emergency pause/resume functions
         */
        public async pauseEvent(params: RequestType<typeof api_fairmint_admin_pauseEvent>): Promise<ResponseType<typeof api_fairmint_admin_pauseEvent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/admin/pause`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_admin_pauseEvent>
        }

        /**
         * Comprehensive safety monitoring with enhanced algorithms
         */
        public async performEnhancedSafetyCheck(params: RequestType<typeof api_fairmint_safety_enhanced_performEnhancedSafetyCheck>): Promise<ResponseType<typeof api_fairmint_safety_enhanced_performEnhancedSafetyCheck>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId: params.eventId === undefined ? undefined : String(params.eventId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/safety/enhanced-check`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_safety_enhanced_performEnhancedSafetyCheck>
        }

        /**
         * Comprehensive safety monitoring for fair mint events
         */
        public async performSafetyCheck(params: RequestType<typeof api_fairmint_safety_performSafetyCheck>): Promise<ResponseType<typeof api_fairmint_safety_performSafetyCheck>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                eventId: params.eventId === undefined ? undefined : String(params.eventId),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/safety/check`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_safety_performSafetyCheck>
        }

        /**
         * Bulk claim processing for admin (emergency function)
         */
        public async processBulkClaims(params: RequestType<typeof api_fairmint_vesting_enhanced_processBulkClaims>): Promise<ResponseType<typeof api_fairmint_vesting_enhanced_processBulkClaims>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/vesting/bulk-claim`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_vesting_enhanced_processBulkClaims>
        }

        /**
         * Automated daily cap reset function
         */
        public async resetDailyCaps(): Promise<ResponseType<typeof api_fairmint_safety_resetDailyCaps>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/safety/reset-daily-caps`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_safety_resetDailyCaps>
        }

        public async resumeEvent(params: RequestType<typeof api_fairmint_admin_resumeEvent>): Promise<ResponseType<typeof api_fairmint_admin_resumeEvent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/admin/resume`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_admin_resumeEvent>
        }

        /**
         * Validates a quote before burning
         */
        public async validateQuote(params: RequestType<typeof api_fairmint_quote_validateQuote>): Promise<ResponseType<typeof api_fairmint_quote_validateQuote>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/fair-mint/quote/validate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_fairmint_quote_validateQuote>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    databaseHealth as api_health_check_databaseHealth,
    detailedHealthCheck as api_health_check_detailedHealthCheck,
    healthCheck as api_health_check_healthCheck,
    solanaHealth as api_health_check_solanaHealth
} from "~backend/health/check";

export namespace health {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.databaseHealth = this.databaseHealth.bind(this)
            this.detailedHealthCheck = this.detailedHealthCheck.bind(this)
            this.healthCheck = this.healthCheck.bind(this)
            this.solanaHealth = this.solanaHealth.bind(this)
        }

        /**
         * Service-specific health checks
         */
        public async databaseHealth(): Promise<ResponseType<typeof api_health_check_databaseHealth>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/health/database`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_health_check_databaseHealth>
        }

        /**
         * Detailed health check with comprehensive monitoring
         */
        public async detailedHealthCheck(): Promise<ResponseType<typeof api_health_check_detailedHealthCheck>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/health/detailed`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_health_check_detailedHealthCheck>
        }

        /**
         * Basic health check endpoint
         */
        public async healthCheck(): Promise<ResponseType<typeof api_health_check_healthCheck>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/health`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_health_check_healthCheck>
        }

        public async solanaHealth(): Promise<ResponseType<typeof api_health_check_solanaHealth>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/health/solana`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_health_check_solanaHealth>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getPrice as api_price_get_getPrice } from "~backend/price/get";
import {
    clearPriceCache as api_price_raydium_only_clearPriceCache,
    getBatchRaydiumPrices as api_price_raydium_only_getBatchRaydiumPrices,
    getRaydiumOnlyPrice as api_price_raydium_only_getRaydiumOnlyPrice,
    raydiumHealthCheck as api_price_raydium_only_raydiumHealthCheck
} from "~backend/price/raydium-only";

export namespace price {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.clearPriceCache = this.clearPriceCache.bind(this)
            this.getBatchRaydiumPrices = this.getBatchRaydiumPrices.bind(this)
            this.getPrice = this.getPrice.bind(this)
            this.getRaydiumOnlyPrice = this.getRaydiumOnlyPrice.bind(this)
            this.raydiumHealthCheck = this.raydiumHealthCheck.bind(this)
        }

        /**
         * Clear pricing cache
         */
        public async clearPriceCache(): Promise<ResponseType<typeof api_price_raydium_only_clearPriceCache>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pricing/raydium-only/clear-cache`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_price_raydium_only_clearPriceCache>
        }

        /**
         * Batch price fetching for multiple tokens
         */
        public async getBatchRaydiumPrices(params: RequestType<typeof api_price_raydium_only_getBatchRaydiumPrices>): Promise<ResponseType<typeof api_price_raydium_only_getBatchRaydiumPrices>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pricing/raydium-only/batch`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_price_raydium_only_getBatchRaydiumPrices>
        }

        /**
         * Gets the USD price for a given SPL token mint.
         */
        public async getPrice(params: { mint: string }): Promise<ResponseType<typeof api_price_get_getPrice>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/price/${encodeURIComponent(params.mint)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_price_get_getPrice>
        }

        /**
         * Gets price data exclusively from Raydium with comprehensive error handling
         */
        public async getRaydiumOnlyPrice(params: { mint: string }): Promise<ResponseType<typeof api_price_raydium_only_getRaydiumOnlyPrice>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pricing/raydium-only/${encodeURIComponent(params.mint)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_price_raydium_only_getRaydiumOnlyPrice>
        }

        /**
         * Health check endpoint for Raydium-only pricing
         */
        public async raydiumHealthCheck(): Promise<ResponseType<typeof api_price_raydium_only_raydiumHealthCheck>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pricing/raydium-only/health`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_price_raydium_only_raydiumHealthCheck>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    checkTransactionStatus as api_storage_arweave_checkTransactionStatus,
    uploadImage as api_storage_arweave_uploadImage,
    uploadMetadata as api_storage_arweave_uploadMetadata
} from "~backend/storage/arweave";

export namespace storage {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.checkTransactionStatus = this.checkTransactionStatus.bind(this)
            this.uploadImage = this.uploadImage.bind(this)
            this.uploadMetadata = this.uploadMetadata.bind(this)
        }

        /**
         * Helper function to check Arweave transaction status
         */
        public async checkTransactionStatus(params: { transactionId: string }): Promise<ResponseType<typeof api_storage_arweave_checkTransactionStatus>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/storage/status/${encodeURIComponent(params.transactionId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_storage_arweave_checkTransactionStatus>
        }

        /**
         * Uploads an image to Arweave
         */
        public async uploadImage(params: RequestType<typeof api_storage_arweave_uploadImage>): Promise<ResponseType<typeof api_storage_arweave_uploadImage>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/storage/upload-image`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_storage_arweave_uploadImage>
        }

        /**
         * Uploads token metadata to Arweave
         */
        public async uploadMetadata(params: RequestType<typeof api_storage_arweave_uploadMetadata>): Promise<ResponseType<typeof api_storage_arweave_uploadMetadata>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/storage/upload-metadata`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_storage_arweave_uploadMetadata>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    getBalance as api_token_balance_getBalance,
    getBalances as api_token_balance_getBalances
} from "~backend/token/balance";
import { create as api_token_create_create } from "~backend/token/create";
import { get as api_token_get_get } from "~backend/token/get";
import { list as api_token_list_list } from "~backend/token/list";
import {
    getMintHistory as api_token_manage_getMintHistory,
    getStats as api_token_manage_getStats,
    updateToken as api_token_manage_updateToken
} from "~backend/token/manage";
import { mint as api_token_mint_mint } from "~backend/token/mint";
import {
    getTransferHistory as api_token_transfer_getTransferHistory,
    recordTransfer as api_token_transfer_recordTransfer
} from "~backend/token/transfer";

export namespace token {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.get = this.get.bind(this)
            this.getBalance = this.getBalance.bind(this)
            this.getBalances = this.getBalances.bind(this)
            this.getMintHistory = this.getMintHistory.bind(this)
            this.getStats = this.getStats.bind(this)
            this.getTransferHistory = this.getTransferHistory.bind(this)
            this.list = this.list.bind(this)
            this.mint = this.mint.bind(this)
            this.recordTransfer = this.recordTransfer.bind(this)
            this.updateToken = this.updateToken.bind(this)
        }

        /**
         * Creates a new SPL token with metadata
         */
        public async create(params: RequestType<typeof api_token_create_create>): Promise<ResponseType<typeof api_token_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/token/create`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_token_create_create>
        }

        /**
         * Gets a specific token by mint address
         */
        public async get(params: { mintAddress: string }): Promise<ResponseType<typeof api_token_get_get>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/token/${encodeURIComponent(params.mintAddress)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_token_get_get>
        }

        /**
         * Gets the balance of a specific token for a wallet
         */
        public async getBalance(params: RequestType<typeof api_token_balance_getBalance>): Promise<ResponseType<typeof api_token_balance_getBalance>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                walletAddress: params.walletAddress,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/token/${encodeURIComponent(params.mintAddress)}/balance`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_token_balance_getBalance>
        }

        /**
         * Gets all token balances for a wallet
         */
        public async getBalances(params: RequestType<typeof api_token_balance_getBalances>): Promise<ResponseType<typeof api_token_balance_getBalances>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                walletAddress: params.walletAddress,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/token/balances`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_token_balance_getBalances>
        }

        /**
         * Gets mint history for a token
         */
        public async getMintHistory(params: RequestType<typeof api_token_manage_getMintHistory>): Promise<ResponseType<typeof api_token_manage_getMintHistory>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/token/${encodeURIComponent(params.mintAddress)}/mints`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_token_manage_getMintHistory>
        }

        /**
         * Gets comprehensive token statistics
         */
        public async getStats(params: { mintAddress: string }): Promise<ResponseType<typeof api_token_manage_getStats>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/token/${encodeURIComponent(params.mintAddress)}/stats`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_token_manage_getStats>
        }

        /**
         * Gets transfer history for a wallet
         */
        public async getTransferHistory(params: RequestType<typeof api_token_transfer_getTransferHistory>): Promise<ResponseType<typeof api_token_transfer_getTransferHistory>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:         params.limit === undefined ? undefined : String(params.limit),
                mintAddress:   params.mintAddress,
                offset:        params.offset === undefined ? undefined : String(params.offset),
                walletAddress: params.walletAddress,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/token/transfers`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_token_transfer_getTransferHistory>
        }

        /**
         * Lists tokens with optional filtering
         */
        public async list(params: RequestType<typeof api_token_list_list>): Promise<ResponseType<typeof api_token_list_list>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                creatorWallet: params.creatorWallet,
                holderWallet:  params.holderWallet,
                limit:         params.limit === undefined ? undefined : String(params.limit),
                offset:        params.offset === undefined ? undefined : String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/token/list`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_token_list_list>
        }

        /**
         * Mints tokens to a specified address
         */
        public async mint(params: RequestType<typeof api_token_mint_mint>): Promise<ResponseType<typeof api_token_mint_mint>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/token/mint`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_token_mint_mint>
        }

        /**
         * Records a token transfer (called after successful on-chain transfer)
         */
        public async recordTransfer(params: RequestType<typeof api_token_transfer_recordTransfer>): Promise<ResponseType<typeof api_token_transfer_recordTransfer>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/token/transfer`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_token_transfer_recordTransfer>
        }

        /**
         * Updates token management settings
         */
        public async updateToken(params: RequestType<typeof api_token_manage_updateToken>): Promise<ResponseType<typeof api_token_manage_updateToken>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                isFrozen:      params.isFrozen,
                isMintable:    params.isMintable,
                updaterWallet: params.updaterWallet,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/token/${encodeURIComponent(params.mintAddress)}/manage`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_token_manage_updateToken>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { connect as api_wallet_connect_connect } from "~backend/wallet/connect";
import {
    createFeeTransaction as api_wallet_fee_createFeeTransaction,
    processFee as api_wallet_fee_processFee
} from "~backend/wallet/fee";
import {
    getBalance as api_wallet_verify_getBalance,
    verifyTransaction as api_wallet_verify_verifyTransaction
} from "~backend/wallet/verify";

export namespace wallet {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.connect = this.connect.bind(this)
            this.createFeeTransaction = this.createFeeTransaction.bind(this)
            this.getBalance = this.getBalance.bind(this)
            this.processFee = this.processFee.bind(this)
            this.verifyTransaction = this.verifyTransaction.bind(this)
        }

        /**
         * Validates wallet connection and creates session
         */
        public async connect(params: RequestType<typeof api_wallet_connect_connect>): Promise<ResponseType<typeof api_wallet_connect_connect>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/wallet/connect`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_wallet_connect_connect>
        }

        /**
         * Creates a fee transaction that needs to be signed by the client
         */
        public async createFeeTransaction(params: RequestType<typeof api_wallet_fee_createFeeTransaction>): Promise<ResponseType<typeof api_wallet_fee_createFeeTransaction>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/wallet/create-fee-transaction`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_wallet_fee_createFeeTransaction>
        }

        /**
         * Gets the SOL balance of a wallet with enhanced error handling
         */
        public async getBalance(params: { walletAddress: string }): Promise<ResponseType<typeof api_wallet_verify_getBalance>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/wallet/${encodeURIComponent(params.walletAddress)}/balance`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_wallet_verify_getBalance>
        }

        /**
         * Processes a signed fee transaction with comprehensive verification
         */
        public async processFee(params: RequestType<typeof api_wallet_fee_processFee>): Promise<ResponseType<typeof api_wallet_fee_processFee>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/wallet/process-fee`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_wallet_fee_processFee>
        }

        /**
         * Verifies a transaction on Solana blockchain
         */
        public async verifyTransaction(params: RequestType<typeof api_wallet_verify_verifyTransaction>): Promise<ResponseType<typeof api_wallet_verify_verifyTransaction>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/wallet/verify-transaction`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_wallet_verify_verifyTransaction>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.49.3)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
